#!/usr/bin/python

import sys

import gi
from gi.repository import Gio

path = os.getenv('NAUTILUS_SCRIPT_SELECTED_FILE_PATHS','')
if path == '':
    sys.exit(1)
    
path = path.replace('\n', '/')
if not os.path.isdir(path):
    sys.exit(1)

def get_files_and_folders(folder, absolute_folders_paths=True):
    folder_list = []
    files_list = []

    path = Gio.File.new_for_path(folder)
    enumerator = path.enumerate_children(Gio.FILE_ATTRIBUTE_STANDARD_NAME, Gio.FileQueryInfoFlags.NONE)
    info = enumerator.next_file()
    while info is not None:
        if info.get_file_type() == Gio.FileType.DIRECTORY:
            if absolute_folders_paths:
                folder_path = path.get_path() + '/' + info.get_name()
            else:
                folder_path = info.get_name()
            folder_list.append(folder_path)
            info = enumerator.next_file()
        else:
            abs_path = path.get_path() + '/' + info.get_name()
            files_list.append(abs_path)
            info = enumerator.next_file()
     
    return folder_list, files_list
    
dirs, files = get_files_and_folders(path, absolute_folders_paths=False)
    
for f in files:
    content_type, val = Gio.content_type_guess(f)
    simple_file = Gio.File.new_for_path(f)
    name, ext = simple_file.get_basename().rsplit('.', 1)

    destination_folder = Gio.File.new_for_path(path + content_type.split('/')[0].capitalize()) 
    
    destination_path = destination_folder.get_path() + '/' + simple_file.get_basename()
    destination_for_files = Gio.File.new_for_path(destination_path)

    if ext not in dirs:
        Gio.File.make_directory(destination_folder)
        simple_file.move(destination_for_files, Gio.FileCopyFlags.NONE)
        dirs.append(ext)
    else:
        simple_file.move(destination_for_files, Gio.FileCopyFlags.NONE)

